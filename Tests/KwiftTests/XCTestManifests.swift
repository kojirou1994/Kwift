#if !canImport(ObjectiveC)
import XCTest

extension BoolExtensionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BoolExtensionTests = [
        ("testCValueConvertion", testCValueConvertion),
        ("testPreconditionFailError", testPreconditionFailError),
    ]
}

extension ByteOperationsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ByteOperationsTests = [
        ("testBitReader", testBitReader),
        ("testByteAndIntegerConvertion", testByteAndIntegerConvertion),
        ("testBytesToString", testBytesToString),
    ]
}

extension CollectionExtensionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CollectionExtensionTests = [
        ("testCollectionEmptyError", testCollectionEmptyError),
        ("testEmptyCollectionCommonPrefixAndSuffix", testEmptyCollectionCommonPrefixAndSuffix),
        ("testEmptyCommonPrefixAndSuffixCollection", testEmptyCommonPrefixAndSuffixCollection),
        ("testEmptyCommonPrefixSuffix", testEmptyCommonPrefixSuffix),
        ("testEquatableCollectionOfOne", testEquatableCollectionOfOne),
        ("testFindAllIndexes", testFindAllIndexes),
        ("testMiscCodes", testMiscCodes),
        ("testOneElementCollectionCommonPrefixAndSuffix", testOneElementCollectionCommonPrefixAndSuffix),
        ("testStringArrayCommonPrefix", testStringArrayCommonPrefix),
        ("testStringArrayCommonSuffix", testStringArrayCommonSuffix),
        ("testTwoArrayCommonPrefix", testTwoArrayCommonPrefix),
        ("testTwoArrayCommonSuffix", testTwoArrayCommonSuffix),
        ("testTwoStringCommonPrefix", testTwoStringCommonPrefix),
        ("testTwoStringCommonSuffix", testTwoStringCommonSuffix),
        ("testUInt8ArrayCommonPrefix", testUInt8ArrayCommonPrefix),
        ("testUInt8ArrayCommonSuffix", testUInt8ArrayCommonSuffix),
    ]
}

extension ExpressibleByStringLiteralTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExpressibleByStringLiteralTests = [
        ("testUUID", testUUID),
    ]
}

extension FoundationExtensionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FoundationExtensionTests = [
        ("testDecodeContiguousBytesPerformance", testDecodeContiguousBytesPerformance),
        ("testDecodeCopyBytesPerformance", testDecodeCopyBytesPerformance),
        ("testDirectAutoreleasepoolDecodePerformance", testDirectAutoreleasepoolDecodePerformance),
        ("testDirectDecodePerformance", testDirectDecodePerformance),
        ("testJSONDecoder", testJSONDecoder),
        ("testJSONEncoder", testJSONEncoder),
        ("testURLSessionProxy", testURLSessionProxy),
        ("testURLSessionSync", testURLSessionSync),
    ]
}

extension ImageUtilityTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ImageUtilityTests = [
        ("testResolution", testResolution),
    ]
}

extension KwiftExtensionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__KwiftExtensionTests = [
        ("testAutoreleasepool", testAutoreleasepool),
        ("testUnsafeCast", testUnsafeCast),
        ("testV3V5UUID", testV3V5UUID),
    ]
}

extension KwiftUtilityTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__KwiftUtilityTests = [
        ("testAnyCodingKey", testAnyCodingKey),
        ("testQueue", testQueue),
        ("testRetry", testRetry),
    ]
}

extension OptionalExtensionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OptionalExtensionTests = [
        ("testUnwrap", testUnwrap),
    ]
}

extension SequenceExtensionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SequenceExtensionTests = [
        ("testDuplicateAndUnique", testDuplicateAndUnique),
        ("testMakeUniqueName", testMakeUniqueName),
        ("testPredicateCount", testPredicateCount),
        ("testSortKeyPath", testSortKeyPath),
    ]
}

extension StringExtensionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringExtensionTests = [
        ("testBlankString", testBlankString),
        ("testCFStringEncodings", testCFStringEncodings),
        ("testCharacterPartialRange", testCharacterPartialRange),
        ("testFoundationAPI", testFoundationAPI),
        ("testIntIndex", testIntIndex),
        ("testSafeFilename", testSafeFilename),
        ("testUtilities", testUtilities),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(BoolExtensionTests.__allTests__BoolExtensionTests),
        testCase(ByteOperationsTests.__allTests__ByteOperationsTests),
        testCase(CollectionExtensionTests.__allTests__CollectionExtensionTests),
        testCase(ExpressibleByStringLiteralTests.__allTests__ExpressibleByStringLiteralTests),
        testCase(FoundationExtensionTests.__allTests__FoundationExtensionTests),
        testCase(ImageUtilityTests.__allTests__ImageUtilityTests),
        testCase(KwiftExtensionTests.__allTests__KwiftExtensionTests),
        testCase(KwiftUtilityTests.__allTests__KwiftUtilityTests),
        testCase(OptionalExtensionTests.__allTests__OptionalExtensionTests),
        testCase(SequenceExtensionTests.__allTests__SequenceExtensionTests),
        testCase(StringExtensionTests.__allTests__StringExtensionTests),
    ]
}
#endif
